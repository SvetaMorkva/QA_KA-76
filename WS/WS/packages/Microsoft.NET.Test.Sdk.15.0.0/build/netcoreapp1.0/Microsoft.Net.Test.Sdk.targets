<!--
 ***********************************************************************************************
 Microsoft.NET.Test.Sdk.targets

 WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
           created a backup copy.  Incorrect changes to this file will make it
           impossible to load or build your test projects from the command-line or the IDE.

 Copyright (c) Microsoft. All rights reserved.
 ***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
     ============================================================
     GenerateProgramFile
     Generates Program file which contains the Main entry point
     ============================================================
  -->
  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    <GeneratedProgramFile Condition="'$(GeneratedProgramFile)' ==''">$(IntermediateOutputPath)$(MSBuildProjectName).Program$(DefaultLanguageSourceExtension)</GeneratedProgramFile>
    <GenerateProgramFile Condition="'$(GenerateProgramFile)' == ''">true</GenerateProgramFile>
  </PropertyGroup>

  <!--
     Output type for dotnet core test project should be exe. For full CLR it is Library by default.
     This should be added in props file.
     Issues: https://github.com/dotnet/roslyn-project-system/issues/268,
     https://devdiv.visualstudio.com/DevDiv/_workitems?id=375688&_a=edit
  -->
  <PropertyGroup Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp'">
    <OutputType>Exe</OutputType>
  </PropertyGroup>

  <!--
     In IDE scenario for full CLR projects default test platform is v1, which expects full pdbs for source information.
     This can be removed once TPv2 is default for full CLR. Related issue https://github.com/Microsoft/vstest/issues/373.
   -->
  <PropertyGroup>
    <DebugType Condition="'$(TargetFrameworkIdentifier)' != '.NETCoreApp'">Full</DebugType>
  </PropertyGroup>

  <!--
     Note that this must run before every invocation of CoreCompile to ensure that all
     compiler runs see the generated Program file. Furthermore, we  must run *after*
     PrepareForBuild to ensure that the intermediate directory has been created.
  -->

  <Target Name="GenerateProgramFile"
          BeforeTargets="CoreCompile"
          DependsOnTargets="PrepareForBuild;CoreGenerateProgramFile"
          Condition="'$(GenerateProgramFile)' == 'true'" />

  <Target Name="CoreGenerateProgramFile"
          Condition="'$(Language)'=='VB' or '$(Language)'=='C#'"
          Inputs="$(MSBuildAllProjects)"
          Outputs="$(GeneratedProgramFile)">

    <ItemGroup Condition="'$(Language)'=='C#'">
      <Line Include="// &lt;auto-generated&gt; This file has been auto generated. &lt;/auto-generated&gt; "/>
      <Line Include="using System%3b "/>
      <Line Include="class AutoGeneratedProgram {static void Main(string[] args){}}"/>
    </ItemGroup>

    <ItemGroup Condition="'$(Language)'=='VB'">
      <Line Include="' &lt;auto-generated&gt; This file has been auto generated. &lt;/auto-generated&gt; "/>
      <Line Include="Imports System"/>
      <Line Include="Module AutoGeneratedProgram"/>
      <Line Include="Sub Main(args As String())"/>
      <Line Include="End Sub"/>
      <Line Include="End Module"/>
    </ItemGroup>
    <WriteLinesToFile
      File="$(GeneratedProgramFile)" Lines="@(Line)" Overwrite="true" Encoding="Unicode">
    </WriteLinesToFile>

    <!--
    Compile Include the generated Program File
    -->
    <ItemGroup>
      <Compile Include="$(GeneratedProgramFile)"/>
    </ItemGroup>
  </Target>
</Project>